# Protocol Integration Documentation

## JT808 Protocol Integration

The JT/T 808 protocol is a Chinese national standard for GPS communication in vehicle/asset tracking. This document outlines the key aspects of the implementation.

### Protocol Format

JT808 messages follow this general format:
1. Start marker: 0x7e
2. Message header:
   - Message ID (2 bytes)
   - Message properties (2 bytes)
   - Phone number (device ID, 6 bytes)
   - Message sequence number (2 bytes)
   - Message packet information (optional, for fragmented messages)
3. Message body (variable length)
4. Checksum (1 byte)
5. End marker: 0x7e

### Key Message Types

1. Terminal Registration (0x0100):
   - Used when a device first connects to the server
   - Contains device information (manufacturer ID, model, etc.)
   - Server responds with a registration response (0x8100)

2. Terminal Authentication (0x0102):
   - Used to authenticate a device using the code provided during registration
   - Server responds with a general response (0x8001)

3. Location Information Report (0x0200):
   - Contains GPS coordinates, speed, direction, etc.
   - Server responds with a general response (0x8001)
   - Additional data fields for pet devices:
     - 0x30: Battery level (percentage)
     - 0x31: Pet activity level (percentage)
     - 0x32: Pet health status flags
     - 0x33: Temperature (for pet health monitoring, in Celsius)

4. Heartbeat (0x0002):
   - Simple keep-alive message
   - Server responds with a general response (0x8001)

### Implementation Details

1. Message Parsing:
   - Messages are identified by the 0x7e marker
   - Escape sequences: 0x7d01 replaces 0x7d, 0x7d02 replaces 0x7e
   - BCD encoding is used for the device ID (phone number)
   - Binary flags and bit fields are used extensively

2. Server Response:
   - Nearly all messages require a response
   - The response typically includes:
     - Original message ID + 0x8000
     - Message sequence number from the original message
     - Result code (0 = success)

3. Time Encoding:
   - Time values use BCD encoding
   - Format: YYMMDDhhmmss (year, month, day, hour, minute, second)

4. Device Identification:
   - Devices are identified by their "phone number" field
   - This ID is stored as the device_id in our database

### Implementation Challenges

1. Binary Protocol Complexity:
   - Unlike the text-based 808 protocol, JT808 requires byte-level parsing
   - Attention to byte order and bit fields is critical

2. Escape Sequences:
   - Special handling for 0x7d and 0x7e bytes within messages
   - Failure to properly handle these sequences causes message corruption

3. Authentication Flow:
   - Two-step process: registration then authentication
   - Must store authentication codes between messages

### Testing

Test the implementation using the device simulator:
```
python tools/device_simulator.py --device-id test123 --imei 123456789012345 --interval 5 --protocol jt808
```

Verify proper protocol detection, registration, authentication, and location updates in the server logs.

## Traditional 808 Protocol Format

The traditional 808 protocol is text-based with simple message structures:

1. Login message:
   ```
   *ID,IMEI:<imei>,BP01,<datetime>,<device_id>#
   ```

2. Location message:
   ```
   *ID,IMEI:<imei>,BP02,<datetime>,<device_id>,<lat>,<lon>,<alt>,<speed>,<heading>,<battery>#
   ```

3. Heartbeat message:
   ```
   *ID,IMEI:<imei>,BP00,<datetime>,<device_id>#
   ```

The server responds with:
```
*ID,<imei>,ACK,OK#
```

## Protocol Conversion

Our system maintains compatibility by:

1. Auto-detecting the protocol based on message characteristics
2. Normalizing the parsed data from both protocols into a common format
3. Using a consistent device identifier across both protocols
4. Storing location data in a unified database schema

This allows devices using either protocol to be managed through the same interface.

## Pet Tracking Specific Protocol Extensions

Our implementation includes specific extensions for pet tracking devices:

1. Additional Data Fields:
   - 0x30: Battery level (percentage)
   - 0x31: Pet activity level (percentage, indicating movement/exercise)
   - 0x32: Pet health status flags (bit-encoded status information)
   - 0x33: Temperature (for health monitoring, in Celsius Ã— 10)

2. Status Interpretation:
   - Activity level classifies pet behavior as:
     - 0-25%: Resting/sleeping
     - 26-50%: Light activity
     - 51-75%: Moderate activity
     - 76-100%: High activity
   
   - Health status flags (when supported by device):
     - Bit 0: Temperature warning
     - Bit 1: Inactivity warning
     - Bit 2: Abnormal movement pattern
     - Bit 3: Potential distress

3. Implementation Notes:
   - Not all pet tracking devices support these additional data fields
   - Devices may implement a subset of the fields based on capabilities
   - The server handles all data variations gracefully
